Quasi-Stable Patience Sort for C
--------------------------------

This is a translation of my ATS/Postiats patience sort to C.

I call this implementation ‘quasi-stable’ because stability of the
result depends on determining whether two elements are equal and then
comparing their original indices. This is little extra computation if
your compar procedure is one that tests for equality, but if your
compar procedure is really just a less-than predicate then the sort
will be unstable. In what I am calling a ‘true’ stable sort--for
instance, a stable mergesort--stability arises without any extra
computation whatsoever.

‘Patience sort’ is an old method of sorting, inspired by the solitaire
card game Klondike (which sorts the cards face-up as you play it). You
‘deal’ the data into Klondike-like sorted piles, and then do a k-way
merge of the sorted piles. Patience sort seemed too ‘heavy’ until I
implemented it in Fortran without resorting to linked lists. So the
stuff here goes back to my Rosetta Code contribution of a Fortran
implementation, followed by my migration of that implementation to
other languages (including at least Ada, Mercury, Modula-2, Pascal,
and ATS).

I think this sort is pretty fast, but it does use a fair bit of
temporary storage (as integer arrays). So keep that in mind.

It should perform O(n log n) in the worst case and O(n) in the best
case.

On data already sorted, this sort is likely to outperform the qsort of
glibc. On random data, it is likely to underperform qsort, and to
degrade in speed as the array to be sorted grows. But it does have
‘quasi-stability’, and it does not have to alter the original array.

Also, I have not put effort into speeding this sort up. It is simply
reasonably fast as a quick draft.
